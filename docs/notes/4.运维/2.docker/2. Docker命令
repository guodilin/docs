![image-20250117100913895](C:\Users\guodilin\AppData\Roaming\Typora\typora-user-images\image-20250117100913895.png)

## 镜像(image)

### 1. 拉取镜像

```bash
docker pull 	# 拉取镜像
docker pull nginx 		# 拉取nginx or nginx:tag
```

### 2. 查看本地镜像

```bash
docker images 		# 查看所有本地镜像
docker images nginx			# 查看指定镜像
```

### 3. 删除本地镜像

```bash
docker rmi nginx		# 删除nginx镜像
```

### 4. 导出容器

```bash
# 导出容器名为myimage，并命名为myimage，格式tar
docker save -o myimage.tar myimage:latest
```

### 5. 导入容器

```bash
# 导入 myimage
docker load -i myimage.tar
```

## 容器

### 1. 创建容器

```bash
docker run -d --name nginx -p 80:80 nginx 	# 创建nginx容器
```

### 2. 删除容器

```bash
docker rm nginx		# 删除nginx 容器，只能删除停止的容器
docker rm nginx -f		# 强制删除nginx容器
```

### 3. 停止容器

```bash
docker stop nginx	# 停止nginx容器
```

### 4. 启动容器

```bash
docker start nginx	# 启动nginx容器
```

### 5. 重启容器

```bash
docker run start nginx		 # 重启容器nginx
```

### 6. 查看容器状态

```bash
docker ps	# 查看启动成功的容器
docker ps -a	#查看所有容器
```

### 7. 查看容器配置

```shell
docker inspect [容器名或容器id]
```

### 8. 操纵容器

```bash
docker exec -it nginx bash 		# 进入nginx的容器内部然后可以对nginx修改
```

### 9. 查看日志

```bash
docker logs nginx	# 查看nginx容器日志
docker logs -f nginx # 查看nginx的容器日志滚动状态
```

## 数据卷

数据卷`(volume)`是一个虚拟目录，是容器内目录与宿主目录之间映射的桥梁。

![img](https://cdn.nlark.com/yuque/0/2023/png/39001393/1695367795898-01dee23a-1205-45a9-b7dc-9e605c835010.png)

### 创建数据卷

```bash
docker volume create web # 创建web数据卷
```

### 查看数据卷

```bash
docker volume ls	# 查看所有数据卷
```

### 删除数据卷

```bash
docker volume rm web	# 删除web数据卷
```

### 查看数据卷详情

```shell
docker volume inspect # 查看数据卷详情
docker volume inspect html	# 查看html数据卷的详细信息
docker volume prune	#	清除数据卷
```

### 创建容器并创建数据卷

#### 创建容器并创建数据卷 html

```shell
docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx
# 数据卷名 html
# 默认创建的数据卷地址  /var/lib/docker/volumes/html/_data
```

#### 创建容器并指定数据卷指定存储路径

```shell
docker run -d --name nginx -p 80:80 -v /www:/usr/share/nginx/html nginx
# 指定宿主机映射路径 /www
```

tis

- 在执行`docker run` 命令时，使用`-v 本地目录:容器内目录`可以完成本地目录的挂载
- 本地目录必须以`/`或`./`开头，如果直接以名称开头，会被识别数据卷而非本地目录 

- `-v mysql:/var/lib/mysql`会识别为一个数据卷叫mysql，运行时会自动创建这个数据卷
- `-v ./mysql:var/lib/mysql`会识别为当前目录下的mysql目录，如果不存在会自动创建



## 网络

| **命令**                  | **说明**                 | **命令说明**                             |
| ------------------------- | ------------------------ | ---------------------------------------- |
| docker network create     | 创建一个网络             | docker network create [网络名]           |
| docker network ls         | 查看网络                 | docker network ls                        |
| docker network rm         | 删除指定网络             | docker network rm [网络名]               |
| docker network prune      | 清除未使用的网络         | docker network prune                     |
| docker network connect    | 加入网络                 | docker network connect [网络名] [容器名] |
| docker network disconnect | 使指定容器连接离开某网络 | docker network disconnect                |
| docker network insppect   | 查看网络详细信息         | docker network insppect [网络名]         |

创建的时候加入网络

```shell
docker network create www		# 需要先创建网络
docker run -d --name nginx -p 80:80 --network www nginx		# 创建容器时加入对应网络
```

## 自构建

### Dockerfile

1. 基础镜像：应用依赖的系统函数库，环境，配置，文件等
2. 层：添加安装包，依赖，配置每次操作都形成新的一层
3. 入口：镜像运行入口，一般是程序启动的脚本和参数

| FROM       | 指定基础镜像                               | from centos:6           |
| ---------- | ------------------------------------------ | ----------------------- |
| ENV        | 设置环境变量，可在后面指令使用             | env key value           |
| COPY       | 拷贝本地文件到镜像的指定目录               | copy /web/java.jar /tep |
| RUN        | 执行lunux的shell命令，一般是安装过程的命令 |                         |
| EXPOSE     | 指定容器运行监听的端口，给镜像使用者看的   | expose 8080             |
| entrypoint |                                            |                         |

```shell
FROM ubuntu:16.04
# 配置环境变量安装路径
ENV JAVA_DIR=/usr/local
# 拷贝至
# copy ./jdk8.gz $JAVA_DIR
# 安装下载JDK $JAVA_DIR
RUN yum -y install wget \
  	&& cd 
    && wget -O jdk-21.tar.gz "https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz" \
    && tar -xvf jdk-21.tar.gz
# 配置环境变量
ENV PATH=$PATH:$JAVA_DIR/jdk-21/bin
# 拷贝jar包并重新命名为app
COPY docker-demo.jar /app.jar
ENTRYPOINT ["java","-jar","/app.jar"]
```

编辑写好了dockerfile可以利用下面命令构建镜像

```shell
docker build -t myimage:1.0 .
-t`：是给镜像起名，格式依然是`repository:tag`的格式，不指定tag时，默认为`latest
.`：是指定dockerfile所在目录，如果就在当前目录，则指定为`.`，默认名字为`dockerfile`，如果不是可直接指定名字`./dockerfile
docker build # 自构建
docker save # 打包
docker load # 加载
docker push # 推送镜像
```

### DockerCompose

通过一个单独的`docker-compose.yml`模板文件（docker-compose.yaml格式）来定义一组相关的应用容器。帮助我们实现多个相互关联的docker容器的快速部署

```yaml
version: "3.4"
services:
  mysql:
    image: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123
      - TZ=Asia/Shanghai
    volumes:
      - "/webdev/mysql/conf:/etc/mysql/conf.d"
      - "/webdev/mysql/data:/var/lib/mysql"
    networks:
      www:
  www:
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - "8080:8080"
    networks:
      www:
  nginx:
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/webdev/nginx/nginx.conf:/etc/nginx/nginx.conf"    # 映射配置文件
      - "/webdev/www:/usr/share/nginx/html"        # 映射html目录
    networks:
      www:
```

 在`docker-compose.yml`目录中执行` `命令

docker compose常用命令

```bash
docker compose  h    # 查看帮助
 
docker compose up    # 启动所有docker compose服务
 
docker compose up  -d    # 启动所有docker compose服务并后台运行
 
docker compose down     # 停止并删除容器、网络、卷、镜像。
 
docker compose exec  yaml里面的服务id   # 进入容器实例内部  docker compose exec docker compose.yml文件中写的服务id /bin/bash
 
docker compose ps      # 展示当前docker compose编排过的运行的所有容器
 
docker compose top       # 展示当前docker compose编排过的容器进程
 
docker compose logs  yaml里面的服务id   # 查看容器输出日志
 
docker compose config     # 检查配置
 
docker compose config  -q  # 检查配置，有问题才有输出
 
docker compose restart   # 重启服务
 
docker compose start     # 启动服务
 
docker compose stop      # 停止服务
```